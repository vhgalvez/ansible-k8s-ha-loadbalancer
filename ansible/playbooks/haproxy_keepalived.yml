# ansible\playbooks\haproxy_keepalived.yml
---
- name: Instalar y Configurar HAProxy + Keepalived para Kubernetes API e Ingress
  hosts: haproxy_keepalived
  become: true
  gather_facts: true

  vars:
    haproxy_config_dir: "/etc/haproxy"
    keepalived_config_dir: "/etc/keepalived"
    haproxy_config_template: "../../templates/haproxy/haproxy.cfg.j2"
    keepalived_config_template: "../../templates/keepalived/keepalived.conf.j2"
    haproxy_socket_dir: "/run/haproxy"
    haproxy_socket_file: "/run/haproxy/admin.sock"
    api_vip: "10.17.5.10"
    second_vip: "10.17.5.30"
    keepalived_auth_type: "PASS"
    keepalived_auth_pass: "12345678"
    haproxy_stats_enabled: true
    haproxy_stats_bind_address: "127.0.0.1"
    haproxy_stats_port: 9000
    haproxy_stats_uri: "/"
    haproxy_stats_refresh: 10s
    haproxy_stats_auth_user: "admin"
    haproxy_stats_auth_pass: "changeme"

  tasks:
    - name: Detectar si es Flatcar Container Linux
      shell: grep -q 'Flatcar' /etc/os-release && echo true || echo false
      register: is_flatcar
      changed_when: false

    - name: Instalar paquetes necesarios en sistemas RHEL-like
      package:
        name:
          - net-tools
          - haproxy
          - keepalived
          - python3-dnf
          - libselinux-python3
          - policycoreutils-python-utils
        state: present
      when: is_flatcar.stdout != 'true'

    - name: Habilitar puertos SELinux para HAProxy
      command: semanage port -a -t http_port_t -p tcp {{ item }}
      loop:
        - 6443
        - 80
        - 443
      ignore_errors: true
      when: is_flatcar.stdout != 'true'

    - name: Crear usuario y grupo haproxy si no existen
      user:
        name: haproxy
        group: haproxy
        shell: /sbin/nologin
        system: yes
        create_home: no
        state: present

    - name: Crear directorios necesarios
      file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: "0755"
      loop:
        - "{{ haproxy_config_dir }}"
        - "{{ keepalived_config_dir }}"
        - "{{ haproxy_socket_dir }}"
        - "/etc/haproxy/errors"

    - name: Crear p√°ginas de error est√°ndar de HAProxy
      copy:
        dest: "/etc/haproxy/errors/{{ item.code }}.http"
        content: |
          HTTP/1.0 {{ item.code }} {{ item.message }}
          Content-Type: text/html

          <html><body><h1>{{ item.code }} {{ item.message }}</h1>
          <p>Lo sentimos, ocurri√≥ un error {{ item.code }}.</p></body></html>
        owner: root
        group: root
        mode: '0644'
      loop:
        - { code: '400', message: 'Bad Request' }
        - { code: '403', message: 'Forbidden' }
        - { code: '408', message: 'Request Timeout' }
        - { code: '500', message: 'Internal Server Error' }
        - { code: '502', message: 'Bad Gateway' }
        - { code: '503', message: 'Service Unavailable' }
        - { code: '504', message: 'Gateway Timeout' }

    - name: Configurar sysctl para net.ipv4.ip_nonlocal_bind en Flatcar
      block:
        - name: Crear unidad systemd para ip_nonlocal_bind
          copy:
            dest: /etc/systemd/system/ip-nonlocal-bind.service
            content: |
              [Unit]
              Description=Enable net.ipv4.ip_nonlocal_bind
              Before=network.target

              [Service]
              Type=oneshot
              ExecStart=/usr/bin/sysctl -w net.ipv4.ip_nonlocal_bind=1
              RemainAfterExit=yes

              [Install]
              WantedBy=multi-user.target
        - name: Habilitar ip-nonlocal-bind.service
          systemd:
            name: ip-nonlocal-bind.service
            enabled: yes
            state: started
      when: is_flatcar.stdout == 'true'

    - name: üìÅ Crear carpeta override para HAProxy en systemd
      file:
        path: /etc/systemd/system/haproxy.service.d
        state: directory
        mode: '0755'

    - name: üõ†Ô∏è Plantilla de override systemd para HAProxy
      template:
        src: "../../templates/haproxy/haproxy-override.conf.j2"
        dest: /etc/systemd/system/haproxy.service.d/override.conf
        mode: '0644'
      notify:
        - üîÑ Reload systemd
        - üîÅ Restart HAProxy

    - name: üìÅ Crear carpeta override para Keepalived en systemd
      file:
        path: /etc/systemd/system/keepalived.service.d
        state: directory
        mode: '0755'

    - name: Crear override systemd para Keepalived
      copy:
        dest: /etc/systemd/system/keepalived.service.d/override.conf
        content: |
          [Unit]
          After=haproxy.service
      notify: üîÑ Reload systemd

    - name: Detectar interfaz de red principal
      command: ip -4 route get 8.8.8.8
      register: default_route
      changed_when: false

    - name: Definir interfaz para Keepalived
      set_fact:
        keepalived_interface: "{{ default_route.stdout.split('dev')[1].split()[0] }}"

    - name: Mostrar interfaz detectada para Keepalived
      debug:
        msg: "Interfaz usada: {{ keepalived_interface }}"

    - name: Plantilla de configuraci√≥n Keepalived
      template:
        src: "{{ keepalived_config_template }}"
        dest: "{{ keepalived_config_dir }}/keepalived.conf"
        mode: "0644"
      notify: üîÅ Restart Keepalived

    - name: Plantilla de configuraci√≥n HAProxy
      template:
        src: "{{ haproxy_config_template }}"
        dest: "{{ haproxy_config_dir }}/haproxy.cfg"
        mode: "0644"
      notify: üîç Validar configuraci√≥n HAProxy

    - name: Borrar socket antiguo si existe
      file:
        path: "{{ haproxy_socket_file }}"
        state: absent

  handlers:
    - name: üîÑ Reload systemd
      command: systemctl daemon-reload
      become: true

    - name: üîç Validar configuraci√≥n HAProxy
      command: "haproxy -c -f {{ haproxy_config_dir }}/haproxy.cfg"
      register: haproxy_config_check_result
      changed_when: false
      notify: üîÅ Restart HAProxy
      ignore_errors: true

    - name: üîÅ Restart HAProxy
      systemd:
        name: haproxy
        state: restarted
        enabled: true
      become: true

    - name: üîÅ Restart Keepalived
      systemd:
        name: keepalived
        state: restarted
        enabled: true
      become: true